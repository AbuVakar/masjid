#!/usr/bin/env node

/**
 * Project Cleanup Script
 * Fixes common issues found in the Silsila-ul-Ahwaal project
 */

const fs = require('fs');
const path = require('path');

console.log('🧹 Starting project cleanup...');

// 1. Remove debug components
const debugComponents = [
  'src/components/FilterDebug.js'
];

debugComponents.forEach(component => {
  if (fs.existsSync(component)) {
    fs.unlinkSync(component);
    console.log(`✅ Removed debug component: ${component}`);
  }
});

// 2. Clean up console.log statements from production files
const filesToClean = [
  'src/App.js',
  'src/components/Filters.js',
  'src/hooks/useFilters.js',
  'src/hooks/useUser.js',
  'src/components/UserAuth.jsx'
];

filesToClean.forEach(file => {
  if (fs.existsSync(file)) {
    let content = fs.readFileSync(file, 'utf8');
    
    // Remove console.log statements (but keep console.error for error handling)
    content = content.replace(/console\.log\([^)]*\);?\s*/g, '');
    content = content.replace(/\/\/ Debug.*$/gm, '');
    content = content.replace(/\/\/ Debug logging.*$/gm, '');
    
    fs.writeFileSync(file, content);
    console.log(`✅ Cleaned debug statements from: ${file}`);
  }
});

// 3. Update package.json scripts
const packageJsonPath = 'package.json';
if (fs.existsSync(packageJsonPath)) {
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  // Add cleanup script
  packageJson.scripts = {
    ...packageJson.scripts,
    'cleanup': 'node cleanup-project.js',
    'setup-admin': 'node server/setupAdmin.js',
    'dev': 'concurrently \"npm run start\" \"cd server && npm run dev\"',
    'build:prod': 'npm run build && cd server && npm start'
  };
  
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('✅ Updated package.json scripts');
}

// 4. Create production environment file
const envContent = `# Production Environment Variables
NODE_ENV=production
REACT_APP_API_URL=https://your-api-domain.com/api
PORT=3000
`;

if (!fs.existsSync('.env.production')) {
  fs.writeFileSync('.env.production', envContent);
  console.log('✅ Created .env.production file');
}

// 5. Create README with setup instructions
const readmeContent = `# Silsila-ul-Ahwaal

## 🚀 Quick Setup

### 1. Install Dependencies
\`\`\`bash
npm install
cd server && npm install
\`\`\`

### 2. Set Up Database
\`\`\`bash
# Start MongoDB (if local)
mongod

# Or use MongoDB Atlas (cloud)
\`\`\`

### 3. Set Up Admin User
\`\`\`bash
npm run setup-admin
\`\`\`

### 4. Start Development
\`\`\`bash
npm run dev
\`\`\`

## 🔐 Admin Access
- **Username:** admin
- **Password:** Generated by setup script
- **Email:** admin@masjid.com

## 👤 Demo Access
- **Username:** demo
- **Password:** demo123

## 🛠️ Available Scripts
- \`npm start\` - Start frontend
- \`npm run dev\` - Start both frontend and backend
- \`npm run build\` - Build for production
- \`npm run setup-admin\` - Set up admin user
- \`npm run cleanup\` - Clean up debug code

## 📁 Project Structure
\`\`\`
├── src/                 # Frontend React code
├── server/             # Backend Node.js/Express
├── public/             # Static files
└── tests/              # Test files
\`\`\`

## 🔧 Environment Variables
Copy \`server/config.env.example\` to \`server/config.env\` and configure:
- MONGODB_URI
- JWT_SECRET
- PORT
- CORS_ORIGIN
`;

fs.writeFileSync('README.md', readmeContent);
console.log('✅ Updated README.md');

// 6. Create .env.example file
const envExampleContent = `# Server Configuration
PORT=5000
NODE_ENV=development

# MongoDB Configuration
MONGODB_URI=mongodb://localhost:27017/silsila_ul_ahwaal

# JWT Configuration
JWT_SECRET=your-super-secure-jwt-secret-key-here
JWT_EXPIRE=7d

# File Upload Configuration
MAX_FILE_SIZE=10485760
UPLOAD_PATH=./uploads

# Rate Limiting
RATE_LIMIT_WINDOW=15
RATE_LIMIT_MAX=100

# CORS Configuration
CORS_ORIGIN=http://localhost:3000
`;

if (!fs.existsSync('server/config.env.example')) {
  fs.writeFileSync('server/config.env.example', envExampleContent);
  console.log('✅ Created server/config.env.example');
}

console.log('🎉 Project cleanup completed successfully!');
console.log('');
console.log('📋 Next steps:');
console.log('1. Run: npm run setup-admin');
console.log('2. Run: npm run dev');
console.log('3. Test the application');
console.log('');
console.log('🔧 If you encounter any issues:');
console.log('- Check MongoDB connection');
console.log('- Verify environment variables');
console.log('- Check console for errors');
